// Code generated by mockery v2.32.4. DO NOT EDIT.

package io

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockBinlogIO is an autogenerated mock type for the BinlogIO type
type MockBinlogIO struct {
	mock.Mock
}

type MockBinlogIO_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBinlogIO) EXPECT() *MockBinlogIO_Expecter {
	return &MockBinlogIO_Expecter{mock: &_m.Mock}
}

// Download provides a mock function with given fields: ctx, paths
func (_m *MockBinlogIO) Download(ctx context.Context, paths []string) ([][]byte, error) {
	ret := _m.Called(ctx, paths)

	var r0 [][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([][]byte, error)); ok {
		return rf(ctx, paths)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) [][]byte); ok {
		r0 = rf(ctx, paths)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, paths)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBinlogIO_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type MockBinlogIO_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - ctx context.Context
//   - paths []string
func (_e *MockBinlogIO_Expecter) Download(ctx interface{}, paths interface{}) *MockBinlogIO_Download_Call {
	return &MockBinlogIO_Download_Call{Call: _e.mock.On("Download", ctx, paths)}
}

func (_c *MockBinlogIO_Download_Call) Run(run func(ctx context.Context, paths []string)) *MockBinlogIO_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockBinlogIO_Download_Call) Return(_a0 [][]byte, _a1 error) *MockBinlogIO_Download_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBinlogIO_Download_Call) RunAndReturn(run func(context.Context, []string) ([][]byte, error)) *MockBinlogIO_Download_Call {
	_c.Call.Return(run)
	return _c
}

// JoinFullPath provides a mock function with given fields: paths
func (_m *MockBinlogIO) JoinFullPath(paths ...string) string {
	_va := make([]interface{}, len(paths))
	for _i := range paths {
		_va[_i] = paths[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(...string) string); ok {
		r0 = rf(paths...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockBinlogIO_JoinFullPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JoinFullPath'
type MockBinlogIO_JoinFullPath_Call struct {
	*mock.Call
}

// JoinFullPath is a helper method to define mock.On call
//   - paths ...string
func (_e *MockBinlogIO_Expecter) JoinFullPath(paths ...interface{}) *MockBinlogIO_JoinFullPath_Call {
	return &MockBinlogIO_JoinFullPath_Call{Call: _e.mock.On("JoinFullPath",
		append([]interface{}{}, paths...)...)}
}

func (_c *MockBinlogIO_JoinFullPath_Call) Run(run func(paths ...string)) *MockBinlogIO_JoinFullPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockBinlogIO_JoinFullPath_Call) Return(_a0 string) *MockBinlogIO_JoinFullPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBinlogIO_JoinFullPath_Call) RunAndReturn(run func(...string) string) *MockBinlogIO_JoinFullPath_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: ctx, kvs
func (_m *MockBinlogIO) Upload(ctx context.Context, kvs map[string][]byte) error {
	ret := _m.Called(ctx, kvs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]byte) error); ok {
		r0 = rf(ctx, kvs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBinlogIO_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockBinlogIO_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - kvs map[string][]byte
func (_e *MockBinlogIO_Expecter) Upload(ctx interface{}, kvs interface{}) *MockBinlogIO_Upload_Call {
	return &MockBinlogIO_Upload_Call{Call: _e.mock.On("Upload", ctx, kvs)}
}

func (_c *MockBinlogIO_Upload_Call) Run(run func(ctx context.Context, kvs map[string][]byte)) *MockBinlogIO_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string][]byte))
	})
	return _c
}

func (_c *MockBinlogIO_Upload_Call) Return(_a0 error) *MockBinlogIO_Upload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBinlogIO_Upload_Call) RunAndReturn(run func(context.Context, map[string][]byte) error) *MockBinlogIO_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBinlogIO creates a new instance of MockBinlogIO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBinlogIO(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBinlogIO {
	mock := &MockBinlogIO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
